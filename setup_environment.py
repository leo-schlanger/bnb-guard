#!/usr/bin/env python3
"""
Script de Configura√ß√£o do Ambiente BNBGuard
Resolve conflitos de depend√™ncias e configura o ambiente corretamente.
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def run_command(command, description):
    """Executa um comando e exibe o progresso."""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Conclu√≠do")
            return True
        else:
            print(f"‚ùå {description} - Erro:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exce√ß√£o: {str(e)}")
        return False

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel."""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 9):
        print("‚ùå Python 3.9+ √© necess√°rio!")
        return False
    
    print("‚úÖ Vers√£o do Python compat√≠vel")
    return True

def check_conda():
    """Verifica se o Conda est√° dispon√≠vel."""
    try:
        result = subprocess.run("conda --version", shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Conda dispon√≠vel: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Conda n√£o encontrado")
            return False
    except:
        print("‚ùå Conda n√£o dispon√≠vel")
        return False

def setup_conda_environment():
    """Configura o ambiente Conda."""
    print("\nüîÑ CONFIGURANDO AMBIENTE CONDA")
    print("=" * 50)
    
    # Verificar se o ambiente j√° existe
    result = subprocess.run("conda env list", shell=True, capture_output=True, text=True)
    if "bnbguard" in result.stdout:
        print("‚ö†Ô∏è Ambiente 'bnbguard' j√° existe")
        response = input("Deseja recriar o ambiente? (s/N): ").lower()
        if response == 's':
            run_command("conda env remove -n bnbguard -y", "Removendo ambiente existente")
        else:
            print("üì¶ Usando ambiente existente")
            return True
    
    # Criar ambiente a partir do environment.yml
    if not run_command("conda env create -f environment.yml", "Criando ambiente Conda"):
        print("‚ùå Falha ao criar ambiente Conda")
        return False
    
    print("‚úÖ Ambiente Conda configurado com sucesso!")
    print("üìå Para ativar o ambiente use: conda activate bnbguard")
    return True

def setup_pip_environment():
    """Configura o ambiente usando pip."""
    print("\nüì¶ CONFIGURANDO AMBIENTE PIP")
    print("=" * 50)
    
    # Atualizar pip
    if not run_command(f"{sys.executable} -m pip install --upgrade pip", "Atualizando pip"):
        print("‚ö†Ô∏è Falha ao atualizar pip")
    
    # Instalar depend√™ncias
    if not run_command(f"{sys.executable} -m pip install -r requirements.txt", "Instalando depend√™ncias"):
        print("‚ùå Falha ao instalar depend√™ncias")
        return False
    
    print("‚úÖ Depend√™ncias instaladas com sucesso!")
    return True

def create_env_file():
    """Cria arquivo .env a partir do exemplo."""
    print("\n‚öôÔ∏è CONFIGURANDO ARQUIVO .env")
    print("=" * 50)
    
    if Path(".env").exists():
        print("‚úÖ Arquivo .env j√° existe")
        return True
    
    if Path("env.example").exists():
        try:
            with open("env.example", "r") as src:
                content = src.read()
            
            with open(".env", "w") as dst:
                dst.write(content)
            
            print("‚úÖ Arquivo .env criado a partir do exemplo")
            print("‚ö†Ô∏è IMPORTANTE: Configure sua BSCSCAN_API_KEY no arquivo .env")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar .env: {str(e)}")
            return False
    else:
        print("‚ùå Arquivo env.example n√£o encontrado")
        return False

def resolve_package_conflicts():
    """Resolve conflitos comuns de pacotes."""
    print("\nüîß RESOLVENDO CONFLITOS DE PACOTES")
    print("=" * 50)
    
    # Verificar conflitos comuns
    conflicts_resolved = 0
    
    # Conflito pydantic-settings
    try:
        import pydantic_settings
        print("‚úÖ pydantic-settings importado com sucesso")
    except ImportError:
        if run_command(f"{sys.executable} -m pip install pydantic-settings==2.1.0", "Instalando pydantic-settings"):
            conflicts_resolved += 1
    
    # Conflito web3
    try:
        import web3
        print("‚úÖ web3 importado com sucesso")
    except ImportError:
        if run_command(f"{sys.executable} -m pip install web3==6.15.1", "Instalando web3"):
            conflicts_resolved += 1
    
    # Conflito fastapi
    try:
        import fastapi
        print("‚úÖ fastapi importado com sucesso")
    except ImportError:
        if run_command(f"{sys.executable} -m pip install fastapi==0.104.1", "Instalando fastapi"):
            conflicts_resolved += 1
    
    if conflicts_resolved > 0:
        print(f"‚úÖ {conflicts_resolved} conflitos resolvidos")
    else:
        print("‚úÖ No conflicts detected")
    
    return True

def test_imports():
    """Testa as importa√ß√µes principais."""
    print("\nüß™ TESTANDO IMPORTA√á√ïES")
    print("=" * 50)
    
    imports_to_test = [
        ("fastapi", "FastAPI"),
        ("pydantic", "Pydantic"),
        ("web3", "Web3"),
        ("httpx", "HTTPX"),
        ("aiohttp", "aiohttp"),
        ("pytest", "pytest"),
    ]
    
    success_count = 0
    for module, name in imports_to_test:
        try:
            __import__(module)
            print(f"‚úÖ {name}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {name}: {str(e)}")
    
    print(f"\nüìä Importa√ß√µes: {success_count}/{len(imports_to_test)} bem-sucedidas")
    return success_count == len(imports_to_test)

def main():
    """Main script function."""
    print("üöÄ CONFIGURA√á√ÉO DO AMBIENTE BNBGUARD")
    print("=" * 60)
    print("üìã Este script ir√° configurar o ambiente e resolver conflitos")
    print()
    
    # Verificar Python
    if not check_python_version():
        sys.exit(1)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("requirements.txt").exists():
        print("‚ùå Execute este script no diret√≥rio raiz do projeto BNBGuard")
        sys.exit(1)
    
    # Configurar ambiente
    has_conda = check_conda()
    
    if has_conda:
        print("\nüéØ OP√á√ïES DE CONFIGURA√á√ÉO:")
        print("1. Usar Conda (recomendado)")
        print("2. Usar pip apenas")
        
        choice = input("\nEscolha uma op√ß√£o (1-2): ").strip()
        
        if choice == "1":
            success = setup_conda_environment()
        else:
            success = setup_pip_environment()
    else:
        success = setup_pip_environment()
    
    if not success:
        print("\n‚ùå FALHA NA CONFIGURA√á√ÉO DO AMBIENTE")
        sys.exit(1)
    
    # Criar arquivo .env
    create_env_file()
    
    # Resolver conflitos
    resolve_package_conflicts()
    
    # Testar importa√ß√µes
    all_imports_ok = test_imports()
    
    # Resultado final
    print("\n" + "=" * 60)
    if all_imports_ok:
        print("üéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        if has_conda and input("Usou Conda? (s/N): ").lower() == 's':
            print("1. Ative o ambiente: conda activate bnbguard")
        print("2. Configure sua BSCSCAN_API_KEY no arquivo .env")
        print("3. Execute o projeto: python main.py")
        print("4. Teste a API: http://localhost:3000/docs")
    else:
        print("‚ö†Ô∏è CONFIGURA√á√ÉO CONCLU√çDA COM ALGUNS PROBLEMAS")
        print("Verifique os erros acima e execute novamente se necess√°rio")
    
    print("\nüí° Para mais informa√ß√µes, consulte o README.md")

if __name__ == "__main__":
    main() 
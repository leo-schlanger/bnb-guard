#!/usr/bin/env python3
"""
Teste de Metadados de Token
Valida que a busca de informa√ß√µes de token est√° funcionando corretamente.
"""

import json
import time
from app.core.utils.metadata import fetch_token_metadata

def test_known_token():
    """Testa com token conhecido (CAKE)."""
    print("üß™ TESTANDO METADADOS DE TOKEN")
    print("=" * 60)
    
    # Token CAKE (PancakeSwap)
    cake_address = "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82"
    
    print(f"üîç Analisando token: {cake_address}")
    print("‚è≥ Buscando metadados...")
    
    start_time = time.time()
    
    try:
        metadata = fetch_token_metadata(cake_address)
        duration = time.time() - start_time
        
        print(f"‚úÖ Metadados obtidos em {duration:.2f}s")
        print()
        
        # Verificar informa√ß√µes b√°sicas
        print("üìã INFORMA√á√ïES DO TOKEN:")
        print(f"   Nome: {metadata.get('name', 'N/A')}")
        print(f"   S√≠mbolo: {metadata.get('symbol', 'N/A')}")
        print(f"   Decimais: {metadata.get('decimals', 'N/A')}")
        print(f"   Supply: {metadata.get('totalSupply', 'N/A')}")
        print(f"   Criador: {metadata.get('ContractCreator', 'N/A')}")
        print()
        
        # Verificar se n√£o tem valores "Unknown"
        issues = []
        if metadata.get('name') == 'Unknown':
            issues.append("Nome est√° 'Unknown'")
        if metadata.get('symbol') == 'Unknown':
            issues.append("S√≠mbolo est√° 'Unknown'")
        if metadata.get('ContractCreator') == 'Unknown':
            issues.append("Criador est√° 'Unknown'")
            
        if issues:
            print("‚ùå PROBLEMAS ENCONTRADOS:")
            for issue in issues:
                print(f"   - {issue}")
            return False
        else:
            print("‚úÖ TODOS OS DADOS OBTIDOS CORRETAMENTE!")
            return True
            
    except Exception as e:
        print(f"‚ùå Erro ao buscar metadados: {str(e)}")
        return False

def test_token_analysis_response():
    """Testa se o formato de resposta est√° correto para an√°lise."""
    print("\nüî¨ TESTANDO FORMATO DE RESPOSTA PARA AN√ÅLISE")
    print("=" * 60)
    
    cake_address = "0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82"
    
    try:
        metadata = fetch_token_metadata(cake_address)
        
        # Verificar se tem ambos os formatos (novo e legacy)
        has_new_format = all(key in metadata for key in ['name', 'symbol', 'decimals'])
        has_legacy_format = all(key in metadata for key in ['TokenName', 'TokenSymbol', 'Decimals'])
        
        print(f"‚úÖ Formato novo (lowercase): {'Sim' if has_new_format else 'N√£o'}")
        print(f"‚úÖ Formato legacy (capitalized): {'Sim' if has_legacy_format else 'N√£o'}")
        
        if has_new_format and has_legacy_format:
            print("‚úÖ COMPATIBILIDADE TOTAL - ambos os formatos dispon√≠veis!")
            return True
        else:
            print("‚ùå Compatibility issues detected")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def main():
    """Main test function."""
    print("üöÄ TESTE DE METADADOS DE TOKEN")
    print("=" * 60)
    print("üìã Verificando se o problema 'Unknown' foi resolvido")
    print()
    
    # Executar testes
    test1 = test_known_token()
    test2 = test_token_analysis_response()
    
    # Resultado final
    print("\n" + "=" * 60)
    if test1 and test2:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ O problema 'Unknown' foi RESOLVIDO!")
        print()
        print("üìã RESULTADO:")
        print("   - Metadados s√£o obtidos corretamente da blockchain")
        print("   - Nome, s√≠mbolo e dados b√°sicos funcionando")
        print("   - Criador do contrato sendo identificado")
        print("   - Compatibilidade com formatos antigo e novo")
        return True
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("Verifique os erros acima")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 